(() => {
    // Function to check if the argument is a function
    var checkFunction = {
        3099: (t) => {
            t.exports = function (t) {
                if (typeof t !== 'function')
                    throw TypeError(String(t) + " is not a function");
                return t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object can be set as a prototype
    var checkPrototype = {
        6077: (t) => {
            var n = r(111);
            t.exports = function (t) {
                if (!n(t) && t !== null)
                    throw TypeError("Can't set " + String(t) + " as a prototype");
                return t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object is an instance of a specific class
    var checkInstance = {
        5787: (t) => {
            t.exports = function (t, e, r) {
                if (!(t instanceof e))
                    throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
                return t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object is actually an object
    var checkObject = {
        9670: (t) => {
            var n = r(111);
            t.exports = function (t) {
                if (!n(t))
                    throw TypeError(String(t) + " is not an object");
                return t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Polyfill for forEach method
    var forEachPolyfill = {
        8533: (t) => {
            "use strict";
            var e = r(2092).forEach, o = r(9341)("forEach");
            t.exports = o ? [].forEach : function (t) {
                return e(this, t, arguments.length > 1 ? arguments[1] : void 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Polyfill for includes and indexOf methods
    var includesAndIndexOfPolyfill = {
        1318: (t) => {
            var e = r(5656), o = r(7466), i = r(1400), a = function (t) {
                return function (e, r, a) {
                    var c, u = n(e), s = o(u.length), f = i(a, s);
                    if (t && r != r) {
                        for (; s > f;)
                            if ((c = u[f++]) != c)
                                return !0;
                    }
                    else
                        for (; s > f; f++)
                            if ((t || f in u) && u[f] === r)
                                return t || f || 0;
                    return !t && -1;
                };
            };
            t.exports = { includes: a(!0), indexOf: a(!1) };
        },
        // Other similar functions omitted for brevity
    };

    // Polyfill for Array methods like forEach, map, filter, etc.
    var arrayMethodsPolyfill = {
        2092: (t) => {
            var e = r(9974), o = r(8361), i = r(7908), a = r(7466), c = r(5417);
            t.exports = function (t) {
                var r, n, u, s, f, p = i(t), l = o(p.length), v = a;
                if (t && "object" == typeof t && "function" == typeof t.forEach)
                    return v(this, t, arguments.length > 1 ? arguments[1] : void 0);
                for (r = !0, n = p, u = l, s = arguments.length > 1 ? arguments[1] : void 0, f = 0; u > f; f++)
                    if (r || f in n) {
                        if (s(r = n[f], f, p), t)
                            if (1 === t)
                                return !0;
                            else if (5 === t)
                                return r;
                            else if (6 === t)
                                return f;
                            else if (2 === t)
                                return void e.call(this, r);
                    }
                return 4 === t ? !1 : void 0;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Polyfill for checking forEach method support
    var forEachSupportPolyfill = {
        9341: (t) => {
            "use strict";
            var e = r(7293);
            t.exports = function (t, e) {
                var r = [] [t];
                return !!r && e(e || function () {
                    throw 1;
                }, 1);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an environment supports certain operations
    var environmentSupportCheck = {
        5417: (t) => {
            var e = r(111), o = r(3157), i = r(5112)("species");
            t.exports = function (t, e) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Polyfill for Array.from method
    var arrayFromPolyfill = {
        7072: (t) => {
            var e = r(5112)("iterator"), o = !1;
            try {
                var i = 0, a = { next: function () {
                        return { done: !!i++ };
                    }, return: function () {
                        o = !0;
                    } };
                a[e] = function () {
                    return this;
                }, Array.from(a, function () {
                    throw 2;
                });
            }
            catch (t) { }
            t.exports = function (t, e) {
                if (!e && !o)
                    return !1;
                var r = !1;
                try {
                    var i = {};
                    i[e] = function () {
                        return { next: function () {
                                return { done: r = !0 };
                            } };
                    }, t(i);
                }
                catch (t) { }
                return r;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the type of an object
    var objectTypeCheck = {
        4326: (t) => {
            var e = {}.toString;
            t.exports = function (t) {
                return e.call(t).slice(8, -1);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the toStringTag of an object
    var objectToStringTag = {
        648: (t) => {
            var e = r(1694), o = r(4326), i = r(5112)("toStringTag"), a = "Arguments" == o(function () {
                return arguments;
            });
            t.exports = e ? o : function (t) {
                var e, r, n;
                return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function (t, e) {
                    try {
                        return t[e];
                    }
                    catch (t) { }
                }(e = Object(t), i)) ? r : a ? o(e) : "Object" == (n = o(e)) && "function" == typeof e.callee ? "Arguments" : n;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to iterate over properties of an object and execute a callback
    var iterateProperties = {
        9920: (t) => {
            var e = r(6656), o = r(3887), i = r(1236), a = r(3070);
            t.exports = function (t, r, n) {
                for (var c = o(r), u = a.f, s = i.f, f = 0; f < c.length; f++) {
                    var p = c[f];
                    e(t, p) || u(t, p, s(r, p, n));
                }
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to define properties on an object
    var defineProperties = {
        8880: (t) => {
            var e = r(9781), o = r(3070), i = r(9114);
            t.exports = e ? function (t, e, r) {
                return o.f(t, e, i(1, r));
            } : function (t, e, r) {
                return t[e] = r, t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get an object's property descriptor
    var getPropertyDescriptor = {
        9114: (t) => {
            var e = r(6656), o = r(6654), i = r(1236).f;
            r(4079)("getOwnPropertyDescriptor", function () {
                return function (t, r) {
                    return i(o(t), r);
                };
            });
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object has a property
    var hasPropertyCheck = {
        6656: (t) => {
            var e = r(111), o = r(6654).f, i = {}.propertyIsEnumerable, a = Object.getOwnPropertyDescriptor, c = {
                f: a && !i.call({ 1: 2 }, 1) ? function (t) {
                    var r = a(this, t);
                    return !!r && r.enumerable;
                } : i
            };
            t.exports = function (t, r) {
                return e(t), o(t, r);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object can be coerced to an object
    var coerceToObjectCheck = {
        111: (t) => {
            module.exports = function (t) {
                return "object" == typeof t ? null !== t : "function" == typeof t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create an object with the specified prototype
    var createObjectWithPrototype = {
        3157: (t) => {
            var e = r(6656), o = r(9781), i = r(9114), a = r(3070), c = r(111), u = r(8647);
            t.exports = function (t, r) {
                var n, s, f = arguments.length < 3 ? t : arguments[2];
                return u(t) === String && "get" in r && (n = r.get(f, !0)) !== undefined ? n : o(t) && (s = a.f(t, f)) ? s.get : e(n = i.f(t, f)) ? n : void 0;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create an array from an iterable object
    var createArrayFromIterable = {
        8361: (t) => {
            var e = r(111), o = r(2092), i = r(5417)("species");
            t.exports = function (t, r) {
                var n, a = e(t).constructor;
                return void 0 === a || null == (n = e(a)[i]) ? r : o(n);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create an array from a string
    var createArrayFromString = {
        7908: (t) => {
            var e = r(111);
            t.exports = function (t) {
                return Object(e(t));
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create a function that returns its argument
    var createFunctionIdentity = {
        7466: (t) => {
            t.exports = function (t) {
                return t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create an array from an array-like object
    var createArrayFromArrayLike = {
        5656: (t) => {
            var e = r(111), o = r(8361);
            t.exports = function (t, r) {
                try {
                    return o(e(t), r);
                }
                catch (e) {
                    return !1;
                }
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to create an object from key-value pairs
    var createObjectFromKeyValuePairs = {
        7293: (t) => {
            var e = r(111), o = r(9781), i = r(3070);
            t.exports = function (t, r) {
                if (e(t), o(r) && r.constructor === Object)
                    return r;
                throw TypeError(r + " is not an object");
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the name of a function
    var functionNameRetrieval = {
        1400: (t) => {
            var e = r(111), o = r(4326), i = r(3070);
            t.exports = function (t) {
                return e(t), o(t.name) || (t.name = i(!1));
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the property of an object
    var getPropertyOfObject = {
        1694: (t) => {
            var e = r(111), o = r(6654), i = r(1236).f;
            r(4079)("getOwnPropertyDescriptor", function () {
                return function (t, r) {
                    return i(o(t), r);
                };
            });
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the keys of an object
    var getKeysofObject = {
        9781: (t) => {
            var e = r(111), o = r(3070), i = r(6656), a = r(8361), c = r(5417)("IE_PROTO"), u = function () { }, s = function (t) {
                return "<script>" + t + "<\/script>";
            };
            t.exports = function (t, r) {
                var n, f = String(o(t)), p = a(r), l = f.length;
                return "symbol" == p.substring(0, 6) && (p = "String" + p.slice(6)), c && (n = t[c]) && i(n, "valueOf") && !i(n.valueOf, "prototype") && (p += s("valueOf")), p = "String" + p.slice(6), l > 10 && (t === u && (t = ""), n = t.slice(0, 10), f.length > 10 && (f = f.slice(0, 10))), s(n + f);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the property descriptor of an object
    var getPropertyDescriptorofObject = {
        1236: (t) => {
            var e = r(111), o = r(9114), i = r(9781), a = r(6654), c = r(6656), u = r(3070), s = u.f, f = o.f, p = i.f, l = tSymbol("src"), v = Function.toString, h = "name", d = RegExp("^" + v.call(s).replace(/[\\40-\\55\\61-\\163\\172\\175\\43\\161]/g, "\\\\$&").replace(/u0000/g, "[\\\\0-\\\\57]"), "g"), y = "toString", m = Function[y], g = (s + "").split(y);
            r(4079)("inspectSource", function (t) {
                return s.call(t);
            }), t.exports = function (t, r, n, o) {
                var i = u(t), s = u(r);
                if (i !== s) {
                    var f = i[y];
                    u(s[y]) && (f = s[y]), String(f) == String(m) && (o = !0);
                }
                if (u(t) == u(r))
                    return void 0;
                if (o)
                    try {
                        return p(i, r, n);
                    }
                    catch (t) { }
                return function (t, r, n) {
                    var o, i, a, c = [t, r], u = 0;
                    for (o in c)
                        if (a = c[o], i = p(i = e(i, r)) && f(i, r) ? i : void 0, e(a, r))
                            try {
                                c[u++] = n ? i(a, r) : i(a);
                            }
                            catch (t) { }
                    return u;
                }(n ? i : l(i), n ? r : l(s), o);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if an object is an iterable
    var objectIterableCheck = {
        6654: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to convert an object to a string
    var objectToStringConversion = {
        5417: (t) => {
            var e = r(111), o = r(8361), i = r(2092);
            t.exports = function (t) {
                if (!o(t))
                    return !1;
                var r = t.valueOf, n = i(t.valueOf);
                return r !== n;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to verify if a value is a string
    var verifyStringCheck = {
        4326: (t) => {
            t.exports = function (t) {
                return "string" == typeof t;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the prototype of an object
    var getObjectPrototype = {
        3070: (t) => {
            var e = r(111), o = r(6654), i = r(9781);
            t.exports = function (t) {
                var r, n = o(t), a = 1;
                return t !== r;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to check if a value is an object
    var checkObjectCheck = {
        8361: (t) => {
            var e = r(111), o = r(5417), i = r(2092), a = r(8361), c = r(4326), u = r(6654), s = r(6656), f = r(9781), p = r(3070), l = r(111), v = r(3070), h = r(2092), d = r(8361), y = r(5417), m = r(6654), g = r(6656), b = r(9781), w = r(111), S = r(3070);
            t.exports = function (t, r) {
                var n = 0, o = !1, i = !1, a = !0;
                if ("function" != typeof t)
                    throw TypeError("Invalid type");
                return void 0 === r && (r = !1), r && (a = !1), t.prototype !== Object.prototype && (o = !0, i = !1), {
                    f: function (t, r, u) {
                        var s = t * r;
                        return a ? (o && (n = o), s) : (n = a, i = a), l(s, r), (t = l(1e3, a)), o ? r = l(1e3, a) : (u = l(1e3, a));
                    }
                };
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to validate the type of an object
    var validateObjectType = {
        2092: (t) => {
            var e = r(111), o = r(5417), i = r(6654), a = r(6656), c = r(9781), u = r(3070), s = r(2092), f = r(8361), p = r(4326), l = r(6656), v = r(6654), h = r(8361), d = r(5417), y = r(6656), m = r(2092), g = r(9781), b = r(3070), w = r(111), S = r(3070);
            t.exports = function (t) {
                var r, n, o = l(u(t)), i = f(o), a = p(u(o)) ? u(o) : p(n = o.valueOf) && o == r ? u(n.call(o)) : 1, c = h(t);
                if (g(i) && (w(c = s(c)) && (c = r, c = h(i)))) {
                    if ((r = w(o), S(t)))
                        throw w(r);
                }
                return r;
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to validate the return value of a function
    var validateFunctionReturnValue = {
        9781: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to retrieve the value of a property
    var retrievePropertyValue = {
        6656: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to retrieve the value of an object's prototype
    var retrievePrototypeValue = {
        4326: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to retrieve the value of an object's property
    var retrieveObjectPropertyValue = {
        8361: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to retrieve the value of an object's prototype
    var retrievePrototypeObjectValue = {
        5417: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the value of an object's prototype
    var getObjectPrototypeValue = {
        6654: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null === (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to convert a value to a string
    var convertValueToString = {
        9781: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to convert a value to an object
    var convertValueToObject = {
        3070: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to convert a value to a string
    var convertValueToString = {
        2092: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to convert a value to an object
    var convertValueToObject = {
        5417: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };

    // Function to get the prototype of an object
    var getObjectPrototypeValue = {
        6656: (t) => {
            var e = r(111), o = r(8361), i = r(5417)("species");
            t.exports = function (t) {
                var r;
                return o(t) && ("function" != typeof (r = t.constructor) || r !== Array && !o(r.prototype) ? e && null == (r = void 0) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === 0 ? 0 : 0);
            };
        },
        // Other similar functions omitted for brevity
    };
